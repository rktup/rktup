// Code generated by go-bindata.
// sources:
// index.html
// ac-discovery.html
// DO NOT EDIT!

package rktup

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdd\x93\xdb\x36\x92\x7f\xf7\x5f\xd1\xc7\x3c\x24\xa9\x90\x4d\x7c\xf0\x53\x27\xe9\xca\xb1\xe3\x73\xb6\xec\xad\xbd\xc4\xce\xed\x3e\x6d\x41\x20\x24\xc1\x43\x12\x2c\x00\x92\x46\x9e\x9a\xff\xfd\x0a\xa4\x3e\x66\x26\xe3\xec\x6d\xca\x7a\x18\x11\xdd\x8d\x5f\x77\xff\xd0\xdd\x43\x68\xfe\x1f\x8d\x91\xfe\x38\x28\xd8\xfa\xae\x5d\xbe\x98\x87\x2f\x68\x45\xbf\x59\x44\xaa\x8f\x82\x40\x89\x66\xf9\x02\x60\xde\x29\x2f\xa0\x17\x9d\x5a\x44\x7b\xad\x0e\x83\xb1\x3e\x02\x69\x7a\xaf\x7a\xbf\x88\x0e\xba\xf1\xdb\x45\xa3\xf6\x5a\xaa\x64\x5c\xc4\xa0\x7b\xed\xb5\x68\x13\x27\x45\xab\x16\x34\x82\xf4\x0a\x24\xb7\xc2\x3a\xe5\x17\xd1\xce\xaf\x93\x2a\x5a\xbe\x08\x1a\xaf\x7d\xab\x96\xf6\xc6\xef\x86\x79\x3a\x2d\x46\x79\xab\xfb\x1b\xb0\xaa\x5d\x44\xce\x1f\x5b\xe5\xb6\x4a\xf9\x08\xb6\x56\xad\x17\xd1\xd6\xfb\xc1\xcd\xd2\xb4\x13\xb7\xb2\xe9\x71\x65\x8c\x77\xde\x8a\x21\x2c\xa4\xe9\xd2\x8b\x20\xcd\x90\x20\x49\x56\xca\x8b\x54\x3a\x77\x55\x60\xa7\x7b\x94\xce\x45\xa0\x7b\xaf\x36\x56\xfb\xe3\x22\x72\x5b\xc1\xab\x2c\x49\xff\x51\x0c\xaf\x8b\x37\xbf\xa5\xbf\xed\xd9\xdb\xbf\xf4\x2f\x0b\xff\xc3\xde\xb5\x1f\x8b\xf5\xe1\x1f\x7f\xff\xf4\xea\x8d\x97\x3f\x0d\x6f\x57\x7f\xfd\x0b\x69\x8f\x2f\xdf\xb8\xbf\x7f\x70\x9f\x7e\x5c\xad\xc5\xeb\x4f\x9f\x5f\xbe\x53\xff\xe3\xfe\x5a\xbc\x8f\x40\x5a\xe3\x9c\xb1\x7a\xa3\xfb\x45\x24\x7a\xd3\x1f\x3b\xb3\x73\xd1\xf2\x92\xd7\xe3\x34\xd6\xa6\xf7\x0e\x37\xc6\x6c\x5a\x25\x06\xed\xc6\x1c\xa4\x73\xff\xb5\x16\x9d\x6e\x8f\x8b\x5f\xcc\xca\x78\x13\xfd\x8e\x8d\x89\xa8\x51\x30\x3e\xae\x4c\x73\x84\xbb\x17\x00\x00\x01\x32\x99\xb6\xcf\xe0\xdb\x09\xe0\xdb\x18\x9c\xe8\x5d\xe2\x94\xd5\xeb\xff\x1c\xcd\x06\xd1\x34\xba\xdf\x24\xde\x0c\x33\xa0\xf9\x70\xfb\x58\xbc\x32\xde\x9b\xee\xaa\xb9\x7f\x01\x80\x8d\x76\x43\x2b\x8e\x09\x8d\xaf\xcf\xec\xc1\x33\x7f\xf0\x9c\xfd\x3b\xe1\x04\xf4\x79\x7a\x4e\x67\x9e\x4e\x55\x38\x0f\x59\x4d\x99\x36\x7a\x0f\xb2\x15\xce\x2d\xa2\x50\x83\x42\xf7\xca\x8e\xa4\x3e\xd6\x79\x75\xeb\x13\xa9\x7a\x3f\x6a\xe7\x6e\xbf\x09\x26\xb7\x5d\xdb\xbb\x59\x23\x27\xda\x67\x69\x3a\xec\x6c\x8b\xc6\x6e\xd2\x46\xa6\xaa\x55\x9d\xea\xbd\x4b\x29\xd2\x34\xba\x9a\xcb\xab\xb9\xb4\x4a\x78\xbd\x57\xd2\x74\x9d\xe9\xdd\xb8\xb3\x77\xdf\x3c\x30\xb6\xcd\xfa\x62\x7d\x38\x1c\xf0\xc0\x47\x23\x5a\xd7\x75\x4a\x58\xca\x58\x62\x9b\x75\xe2\x8e\xbd\x17\xb7\xc9\xe3\xad\x6e\xbf\x79\x6e\x2b\x23\x84\xa4\x6e\xbf\xb9\x5a\xfe\xff\xac\x66\xce\x34\x7a\x30\x8d\xbe\x98\x9f\x05\xe8\xcc\xce\x4a\xb5\x36\x76\xa3\xb0\x57\x3e\x7d\xfd\xe1\xf5\x45\x99\x10\x6c\x7c\xf3\x00\x46\xf7\x37\x4e\x8a\x41\x3d\xf2\x7a\x16\x4e\x0c\x88\x4e\xb9\x41\x48\xe5\xd2\xb3\x7c\xdc\xbf\x57\xd6\x69\xd3\x2f\x22\x8a\x74\x14\xe8\x66\x11\xbd\x13\x47\x65\xff\x39\xad\x6f\x17\x11\x19\x6e\xc7\xc7\xe3\xf5\x71\x9a\x28\x11\x25\x0c\x49\x4d\xcb\x7a\x14\x6e\x95\xde\x6c\xfd\x59\x4a\xea\x6c\xf2\xa0\xd5\xe1\x47\x13\x60\x80\xc0\x65\x03\x3c\x36\x52\xbd\x58\xb5\x2a\x59\x09\x79\xb3\xb1\x66\xd7\x37\x8b\xa8\x57\x07\x08\x5b\x58\xce\xb1\xca\x0a\xa0\xa4\xc0\x9c\xd4\xe7\xac\x67\x63\x36\x8b\x68\xb0\xca\x29\xbb\x9f\xb2\x39\x13\x34\x6b\x8c\x9c\xa6\xa1\xbd\xf1\x49\x6b\x36\x06\xcf\xbc\x9f\xb3\x9f\x5d\x32\x27\x58\x33\x64\xf0\x5d\x2e\xb9\xaa\x48\x13\x03\x23\xb4\x4c\x48\x95\x90\xe2\xfb\x68\x39\x4e\xc4\x46\x78\x31\x96\xef\x48\xcf\x59\xc2\x2b\x42\xa3\xe5\xdc\x36\xeb\xd9\x2f\xaf\xdf\x2c\xe7\x52\xce\xfe\xd7\xd8\x9b\xc9\x30\x7c\x82\x46\xac\xcc\xce\x2f\xa2\x68\x39\x6f\xe4\x6c\x6d\x6c\x27\xfc\x52\x77\x62\xa3\x42\x25\xfc\x70\xdb\xb5\xf3\xf4\xaa\x08\x36\x61\xe0\x5f\x21\x26\x10\xab\xa6\x72\x78\xb6\x27\x1a\xd9\xe9\xb0\x29\xfd\xd5\xeb\xb6\xfd\x39\x60\x87\x69\x3e\x62\x8d\x63\x7a\xf4\x70\x7e\x3c\x05\xb9\x9c\xa7\x97\xb8\xd3\x73\x42\xcb\x79\xa3\xd6\xee\x9a\x68\x58\xf1\xb2\xae\x47\xb8\x0b\xb7\x81\xd8\x26\x9c\xea\x64\x38\x88\x8d\x92\xa6\x35\x76\x11\x7d\xb3\x1e\x3f\xd1\xa4\x58\x19\xdb\x28\x7b\x56\x15\xe3\xe7\x91\xca\x0c\x42\x8e\xf3\x9c\x9e\xc4\x66\xf5\x49\x49\xef\x4d\xab\xac\xe8\x43\xb6\x94\x9c\x34\x1b\xab\x9b\x67\xe5\x3b\xdd\xa8\xe7\x14\x97\x63\x0e\xe1\x5d\x1c\x3d\xab\x75\x5b\xd1\x98\xc3\x22\x62\x4f\x95\x07\xdd\x37\xe6\x90\x9c\x6b\xbd\xa6\xc5\x17\x2c\x1e\x14\x3e\x8f\xae\xf4\x5d\x88\xe2\x65\x5d\x9e\xe4\x6e\x6b\x0e\x21\x99\x45\xb4\x16\xad\x53\x27\xe9\x5a\xfb\xa4\x13\x76\xa3\xfb\xa4\x55\x6b\xff\x20\x8f\x07\x1a\x6f\x86\xe7\x15\xd3\xf4\x7f\x5e\x67\xcf\x91\x3d\x0d\xfd\xb3\x09\x5b\x4a\x24\x19\x2f\x32\x52\x3d\x55\xcb\xdb\x45\x54\x56\x58\x90\xac\x7e\x46\x79\x5c\x44\x59\x89\x75\xc6\xb3\x2a\xfb\x02\x27\xb7\xcf\xb0\x7d\x52\x1d\x17\x11\xa3\xf5\x97\xc8\xec\xc4\xad\xee\xf4\x67\xd5\x3c\x03\x20\x77\xd6\xaa\xde\x27\x6d\x18\x50\xd7\x39\x15\xca\x73\x73\xe5\x7d\xc3\xcb\xf2\x1c\x96\xb7\xa2\x77\xa1\xbb\x16\xd1\xf8\xd8\x0a\xaf\xbe\x2b\x91\xe4\x34\x4e\x28\x45\x4a\x29\xc9\xab\xd0\xe6\x83\xf0\xdb\x73\xdb\x85\x1e\x87\xbc\x44\x9e\xd7\x31\x25\x1c\x19\x61\x20\x81\xc4\x04\x68\x48\x3a\x4e\x6a\xe4\x55\x0e\x94\x20\x29\x8a\x38\x61\x04\x8b\x1c\x72\x2c\xb2\x22\x4e\x38\xb2\x82\x01\xa5\xc8\x49\x15\x27\x25\xb2\xbc\x06\x5a\x20\x25\x59\x9c\x50\x86\x24\xcf\x20\xc3\x8c\x67\x71\xc2\x28\xd6\x55\x05\x09\x43\x56\x97\x71\x92\xe5\x98\x97\xf5\xd3\x65\x70\x9a\x30\x8e\x79\x4d\xe3\xa4\xc0\x92\xc3\xa4\xa9\xe2\xd1\xb0\x80\x57\xc0\x09\x56\x79\x19\xb3\x12\x33\x46\x81\x15\x58\x15\x2c\xe6\x1c\x49\xc5\x81\x71\x2c\x62\x5e\x61\xc9\x4a\xa0\x0c\x39\x67\x71\x56\x60\x95\x55\xc0\xb0\xce\xea\x38\xab\xb0\xac\xe9\xe3\xc5\x94\x69\x89\x39\xc9\xe3\x1c\x69\xce\x43\x36\x94\x15\x31\xa5\x90\x50\xcc\x33\x16\x67\x98\x65\x53\xe4\x45\x19\x97\xc8\x69\xf6\x78\x41\x30\xaf\xca\x98\x61\x99\xe5\xc0\x90\xb3\x2c\xce\xb1\xce\x4a\xc8\xb0\x64\x34\xae\x91\x96\x55\x80\x2a\xf2\x3c\xa6\xc8\x29\x83\x24\x64\x98\xc7\x0c\x8b\xb2\x84\x24\xc7\x92\xf0\x98\x63\x45\x2b\x48\x08\xb2\x9c\xc5\x04\x29\xaf\xc3\x22\xa7\x31\x41\x56\xb2\xf0\x5c\x16\x65\x4c\x30\x23\x0c\x28\x56\xa4\x0e\x4e\x8a\x12\x6a\x2c\xeb\x3a\xa6\x1c\xb3\x8a\x01\xcd\xb1\xa0\x75\x4c\x73\xcc\x49\x09\x04\x29\xad\xe2\x00\xc9\x39\x10\x64\x19\x0d\x8b\xac\x08\x0b\x1e\x8e\x92\x60\x51\x07\x34\x5a\x86\x03\x42\x5a\x84\xf8\xf3\x8a\xc7\x49\x86\x34\xcf\x80\x63\xcd\xca\x38\xc9\xb1\xe2\x35\x84\xa3\xa6\x31\x0b\x3b\xa1\x08\x8c\xc4\x19\x52\x56\x43\x8d\xa4\xcc\xe2\x0c\xab\x82\x8e\x54\x32\xac\x8a\x3a\x60\x97\x2c\x83\x40\x50\x31\x1e\x5e\x51\x40\x8e\x55\x96\xc7\x1c\x0b\xc6\x42\x35\xd5\x75\x15\x8f\x5c\x57\x4f\x56\x9f\xe1\x3d\x64\x04\xcb\x32\x8f\x2b\x8e\x9c\x55\x20\x03\x65\x3c\x2b\xe3\x84\x62\x96\x43\x52\x62\x59\xb3\x10\x18\x61\x90\x50\x82\x15\x63\x71\x52\x21\xc9\x19\x24\x19\x92\xb1\xa2\xc2\x17\x24\x05\x72\x5a\x86\xca\xcc\xab\x32\xec\xa3\x21\xb6\x1a\xcb\x50\xa7\x98\xf1\x3a\x18\xd6\x24\x87\x22\x90\x39\x56\x69\x95\xd5\x40\x83\x7d\x16\x27\x9c\x23\xcb\x42\x29\x55\x64\x62\xa8\xcc\x42\xc9\x31\x1a\x4e\x82\x16\x1c\x78\xa8\xf1\x70\xac\x59\x0e\x14\x59\x55\xc4\x81\xac\x02\x42\x92\x45\x4c\xeb\x70\x9a\xc1\x51\x1e\x4f\x96\x10\xda\x90\x33\x1a\x53\x82\x79\x41\x21\x61\x15\x12\x16\xd3\x02\x49\xce\x21\xf8\x23\x81\x87\x12\xf3\xac\x80\xcf\xd1\xb9\x45\x43\x9f\x87\x96\xe5\x65\x49\xae\xc2\xcb\x9c\x30\x7d\xaf\xa4\x37\x36\x91\x3b\xbb\x17\x7e\x67\x55\x98\x26\x61\x4e\x48\x6d\x65\x7b\xf9\x07\x1b\xc6\x5c\xce\x90\x90\xf0\xf2\x77\xc1\x09\xf3\x2d\x0f\x07\x4e\x08\x61\x17\xa9\x5d\x44\x15\x96\x45\x4d\x08\xa1\x8f\xe2\x98\x20\x79\x59\xb2\xd1\x43\xba\x79\x3a\x8d\xaa\x3f\x9c\x46\x49\x56\x21\xa7\x15\x99\xce\x2f\xe3\x8c\x96\x45\xf5\xfd\x33\x43\xad\x2a\xbe\x0e\x4c\xf5\x55\x60\x6a\xf2\x75\x60\xd8\xd7\x81\xf9\xb3\x14\x87\xd7\xb0\xd3\xd5\x24\x6d\xf4\x7e\xbc\xc0\x00\xcc\xb7\xf4\xd9\x5b\xca\xe9\xfa\xbb\xa5\x17\x3b\xb6\xfc\x49\xb8\x23\xd8\x1b\x0f\x2f\x5f\xfd\x0c\x8d\x76\xd2\xec\x95\x3d\xce\xd3\x2d\x3b\x1b\x0d\x61\xdf\xb7\x0e\xe6\xe2\xc9\x85\x72\xa3\xfd\x76\xb7\x1a\xaf\x91\x62\x18\x64\xea\x06\x25\xd3\x55\x6b\x56\x69\x27\x9c\x57\x76\x12\x5c\x30\xb1\x6b\xa2\xe5\xcb\x61\x80\x57\xe7\x5b\x15\x8c\xaf\x7b\xf0\xdd\xcb\x57\x3f\x7f\x0f\xaf\xaf\xbe\xc5\x94\x52\x6b\xa4\xf0\xca\xc1\xf8\xc2\x09\xa2\x6f\xc0\xe9\x4d\x3f\xf6\x03\x7c\xfc\xe5\x9d\x83\x9d\xd3\xfd\x06\xde\x7e\xf8\xf0\xb7\x5f\x7f\x78\xfb\xe1\xfd\x3b\x84\xb9\x34\xcd\xe9\x9a\x1f\x5e\x30\xe7\xe9\xb8\x06\x29\xfa\x11\x71\xa5\x60\xe7\x54\x03\xde\x80\x12\x4e\xb7\x47\x90\xa6\x5f\xeb\x4d\x40\xfc\xa2\x97\xb5\x35\x1d\x58\x35\x18\xa7\xbd\xb1\x5a\x4d\xaf\x98\xa6\x87\xff\xd6\xfe\xed\x6e\x85\x27\xfa\x87\x0b\xa9\x7c\xf9\xd1\x89\x8d\x9a\xa7\x5b\x7e\xe5\xf0\x6f\xad\x90\x0a\x04\xac\x75\xab\x4e\x61\xe2\x14\xe7\x27\x67\xfa\x73\xa0\x07\xed\xb7\xe0\xb7\x0a\xd6\xa6\x6d\xcd\x21\xa4\xe7\xbc\xdd\xc9\x31\x1a\x3d\x25\x11\xd4\xd6\x18\x0f\x66\x0d\x47\xb3\xb3\xa7\x38\xae\x21\x1e\xc1\x58\x10\xfd\x11\xdc\x6e\xb5\x36\x6d\xa3\xec\x99\x98\x61\xb7\xba\x51\xc7\x93\xb3\x11\x4c\x3b\x30\x83\xd7\xa6\x17\x2d\x3e\xcc\x21\x5b\xfe\x74\x2b\xba\xa1\x0d\x59\x64\x97\x2c\xac\x5a\xce\xaf\x7b\xef\x4e\x63\x24\xba\x1c\x71\x34\xbb\x08\x01\xa2\x9d\x6d\xff\xe9\x55\x37\x84\x22\x8e\x66\x70\xa9\x1b\x67\x1c\xaa\x5b\x83\xda\xa4\xdd\x31\x11\x52\xbb\xf0\x3d\x58\x13\xde\x9f\x93\xbb\xd3\xd5\xe6\x3e\xb9\x33\xee\x3e\xb9\x13\x56\x6e\xef\xf1\x4e\xdd\xfa\xfb\xf3\xdc\xba\x8f\xcf\x9e\xa7\x84\x7e\xe7\xf6\x5f\x78\x0b\x07\xac\xfb\x4d\x72\xa3\x8e\x28\x9c\x3c\xa3\xbe\xb8\xfe\x3d\x51\x34\x4f\x43\xca\x97\x33\xfc\xe8\xd4\xd8\x2a\xde\xc0\x5a\x79\xb9\x0d\x3c\xdb\x5d\x3f\x9d\xc2\x58\x3f\x31\xac\x8d\x05\x35\x51\x37\x7b\x40\xe8\x13\xea\x02\x4a\xd8\x99\x24\x3a\xb4\xa6\x90\xe1\xce\x0f\x97\xba\x0d\x91\xee\x9c\xb2\x0f\x78\xf9\x62\x58\x5b\xbe\x7c\x25\xf6\x4a\x78\xf7\xb8\xe0\x82\x8b\xbd\xb2\x7a\xad\x95\x1b\x6b\x46\x0c\xc3\xf8\x23\x5b\x28\xdd\xc6\x1c\xfa\xd6\x88\x26\x06\x8d\x0a\x47\xf5\xa8\xea\x76\xce\x87\x2e\x71\x6a\x72\xe8\xcd\x54\x6e\x21\xb0\xd3\x66\x7b\xaa\xa5\x10\xba\x53\x72\x67\x55\x32\x55\x90\x5b\x8c\x14\x9c\x4b\xf9\x0c\x15\x1a\xee\xd4\x23\xe7\xe6\x3c\xf5\x5a\xab\x9d\x3f\x5b\x37\x46\xb9\xf1\x7a\x31\xfa\x9b\xf4\xab\x23\x68\x3f\x75\xdb\xe8\x5a\xb8\x10\x17\xe8\x7e\xb4\xf9\x93\xe3\x48\x48\x8d\x5d\xf3\xcd\xe8\x21\xe9\x44\xaf\xd7\xca\xf9\xc4\xc9\xad\xea\x44\x34\xdd\x6d\xe1\x2c\x0e\x93\x08\x1f\x77\xf6\xd4\x6b\x8f\x99\xfe\xa3\x48\x46\xe6\xa6\xbf\xd1\xf2\x8f\xf5\xc1\xdb\xc3\x8a\x79\x76\x84\xcf\x5d\x27\xda\x76\xf9\xdb\xd4\x23\x33\xb8\xbb\x03\x3c\x2d\xe0\xfe\x7e\x9e\x4e\xea\x11\xe6\x5f\xa3\xfc\xb8\xd3\xad\x1f\x47\x5e\x27\xf4\x34\x93\x9b\xc0\xfa\xef\x12\x3a\x1c\x0e\xe8\xe4\x76\x87\xda\x44\xcb\xf7\x5a\x6e\x85\x6a\xe1\x57\xb9\xdd\xad\x94\xf5\x53\xdc\x0f\x1c\xbf\xb8\xfe\x37\x9a\xa7\xd3\xef\x6a\xf3\x74\xfa\x11\xf8\xff\x02\x00\x00\xff\xff\x99\x78\xa4\x06\x15\x16\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 5653, mode: os.FileMode(420), modTime: time.Unix(1506532856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _acDiscoveryHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcf\x4d\xae\x84\x20\x10\x04\xe0\xbd\xa7\xe8\xc7\x5e\xbd\x40\xcb\x19\x5c\xbc\x0b\x20\xb4\x19\xa2\xfc\x44\xdb\xc9\x10\xc2\xdd\x27\x8c\xd1\xa5\xab\x4a\x11\xf2\x75\x0a\xff\x4c\xd0\x9c\x22\xc1\x8b\xdd\x2a\x1b\xbc\x82\x94\x91\x0d\x00\xb2\xe5\x95\xe4\xb6\xf0\x11\xb1\x3f\x4b\x7d\x76\xc4\x0a\xbc\x72\x34\x08\xa5\x5b\x63\x77\x1d\xde\xb4\x25\x01\x3a\x78\x26\xcf\x83\xc8\x19\xba\x71\xa3\xd9\x7e\xa0\x14\xa8\xed\x9f\x5c\x5c\x15\x13\x94\x22\x2a\x92\x73\x0b\x76\x86\x6e\x3c\xa6\x85\x12\x94\xf2\x00\xb7\xf1\xf7\x69\x7f\x3c\x70\x43\x37\x4f\xde\x54\x17\xfb\x73\x0f\x4e\xc1\x24\xd9\x60\x7f\xe5\xb9\xf6\x1b\x00\x00\xff\xff\xb4\x4c\xb4\xd8\x05\x01\x00\x00")

func acDiscoveryHtmlBytes() ([]byte, error) {
	return bindataRead(
		_acDiscoveryHtml,
		"ac-discovery.html",
	)
}

func acDiscoveryHtml() (*asset, error) {
	bytes, err := acDiscoveryHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ac-discovery.html", size: 261, mode: os.FileMode(420), modTime: time.Unix(1506528281, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"ac-discovery.html": acDiscoveryHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ac-discovery.html": &bintree{acDiscoveryHtml, map[string]*bintree{}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

